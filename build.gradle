plugins {
    // General Plugins
    id "java" // ./gradlew build - https://docs.gradle.org/current/userguide/java_plugin.html
    id "signing" // Performed By Maven Publish - For Signing Artifacts Before Publishing to Sonatype - https://docs.gradle.org/current/userguide/signing_plugin.html
    id "maven-publish" // ./gradlew publish - For publishing to Sonatype - https://docs.gradle.org/current/userguide/publishing_maven.html
    id "com.github.johnrengelman.shadow" version "6.1.0" // ./gradlew shadowJar - https://plugins.gradle.org/plugin/com.github.johnrengelman.shadow
    id "io.codearte.nexus-staging" version "0.22.0" // ./gradlew closeAndReleaseRepository - For releasing uploaded releases to the public - https://plugins.gradle.org/plugin/io.codearte.nexus-staging

    // For Unit-Testing.gradle
    // id "com.github.spotbugs" version "4.5.1" // https://plugins.gradle.org/plugin/com.github.spotbugs
    id "com.github.spotbugs-base" version "4.5.1" // https://plugins.gradle.org/plugin/com.github.spotbugs-base

    // For Experimental.gradle
//    id "com.github.vlsi.license-gather" version "1.7.0" // ./gradlew generateLicense - https://plugins.gradle.org/plugin/com.github.vlsi.license-gather
}

group 'me.alexisevelyn'
version "${project.server_version}"

repositories {
    mavenCentral()
}

jar {
    manifest {
        attributes(
            'Main-Class': 'me.alexisevelyn.crewmate.Main',
            'Bundle-License': 'MIT; link="https://github.com/alexis-evelyn/Crewmate/blob/master/LICENSE.md"'
        )
    }
}

// This is so build time properties like the server version are saved in the jar
// https://stackoverflow.com/a/54006518/6828099
tasks.processResources {
    filesMatching('compileTime.properties') {
        expand([build_version: version])
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Pull Java Source Files For Javadocs
javadoc {
    options.stylesheetFile = new File(projectDir, "src/main/javadoc/alexis-javadoc8.css")
}

// Package Javadocs Into Jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set("javadoc")

    javadoc.failOnError false
    from javadoc.destinationDir
}

// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    // For some reason, depending on processResources does nothing, so I have to copy the code
    filesMatching('compileTime.properties') {
        expand([build_version: getArchiveVersion()])
    }

    archiveClassifier.set("sources")

    from sourceSets.main.allSource
}

// Other Build Gradle Files
apply from: "gradles/dependencies.gradle" // Compile Dependencies
apply from: "gradles/unit-testing.gradle" // Unit Testing Dependencies/Setup
apply from: "gradles/plugins.gradle" // Example/Testing/Demo Plugins

// Experimental Gradle
//apply from: "gradles/experimental.gradle"

// CI Build
if (System.getenv('IS_CI_BUILD') != null) {
    apply from: 'gradles/publishing.gradle'
}